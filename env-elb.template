AWSTemplateFormatVersion: 2010-09-09
Description: create ELB
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          Default: ELB config
        Parameters:
          - VPCStackName
Parameters:
  VPCStackName:
    Description: Base VPC StackName
    Type: String
Resources:
  # LoadBalancer
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      IpAddressType: ipv4
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: "false"
        - Key: deletion_protection.enabled
          Value: "false"
        - Key: idle_timeout.timeout_seconds
          Value: "60"
        - Key: routing.http.desync_mitigation_mode
          Value: "defensive"
        - Key: routing.http.drop_invalid_header_fields.enabled
          Value: "false"
        - Key: routing.http2.enabled
          Value: "true"
      Name: !Sub
        - ${VPCStackName}-${Env}-elb
        - Env: { Fn::ImportValue: !Sub "${VPCStackName}-Env" }
      Scheme: internet-facing
      SecurityGroups:
        - Fn::ImportValue: !Sub "${VPCStackName}-ELB-SecurityGroupId"
      Subnets:
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1A"
        - Fn::ImportValue: !Sub "${VPCStackName}-PublicSubnet1C"
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCStackName}-${Env}-elb
            - Env: { Fn::ImportValue: !Sub "${VPCStackName}-Env" }
        - Key: Env
          Value:
            Fn::ImportValue: !Sub "${VPCStackName}-Env"
      Type: application
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckPort: traffic-port
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Matcher:
        HttpCode: "200"
      Name: !Sub
        - ${VPCStackName}-${Env}-elb-tg
        - Env: { Fn::ImportValue: !Sub "${VPCStackName}-Env" }
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Name
          Value: !Sub
            - ${VPCStackName}-${Env}-elb-tg
            - Env: { Fn::ImportValue: !Sub "${VPCStackName}-Env" }
        - Key: Env
          Value:
            Fn::ImportValue: !Sub "${VPCStackName}-Env"
      TargetGroupAttributes:
        - Key: deregistration_delay.timeout_seconds
          Value: "300"
        - Key: stickiness.enabled
          Value: "false"
        - Key: load_balancing.algorithm.type
          Value: "round_robin"
        - Key: slow_start.duration_seconds
          Value: "0"
      Targets:
        - Id:
            Fn::ImportValue: !Sub "${VPCStackName}-EC2A-InstanceId"
          Port: 80
        - Id:
            Fn::ImportValue: !Sub "${VPCStackName}-EC2C-InstanceId"
          Port: 80
      TargetType: instance
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue: !Sub "${VPCStackName}-VpcId"
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref TargetGroup
          Type: forward
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
